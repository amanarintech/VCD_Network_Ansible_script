- name: Create Direct VDC Network on VMware Cloud Director (without IPv4 subnet)
  hosts: localhost
  gather_facts: false
  vars:
    # Required config
    vcd_organization_vdc_name: ""
    vcd_organization_name: ""
    vcd_api_version: ""
    vcd_api_host_name: ""
    vcd_api_token: ""

    # User Input 
    external_network: ""   # Enter the external network name
    network_name: ""
    network_description: ""
    shared_network: "true"
  tasks:
    - name: Convert shared_network string to boolean
      set_fact:
        shared_network_bool: "{{ shared_network | lower == 'true' }}"
    - name: Get vCloud access token (OAuth)
      uri:
        url: https://{{ vcd_api_host_name }}/oauth/provider/token
        method: POST
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Content-Type: application/x-www-form-urlencoded
        body: 
          refresh_token: '{{ vcd_api_token }}'
          grant_type: refresh_token
        body_format: form-urlencoded
        return_content: yes
      register: vcloud_token_response
    - name: Set access token
      set_fact:
        vcloud_access_token: '{{ vcloud_token_response.json.access_token }}'
    - name: Get organization ID by name
      uri:
        url: https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgs
        method: GET
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
        return_content: yes
      register: orgs_response
      
    - name: Extract organization ID
      set_fact:
        vcd_organization_id: "{{ item.id }}"
      loop: "{{ orgs_response.json['values'] }}"
      when: item.name == vcd_organization_name
      loop_control:
        label: "{{ item.name }}"
      failed_when: not vcd_organization_id is defined or vcd_organization_id == ''
    - name: Get VDC ID by name
      uri:
        url: https://{{ vcd_api_host_name }}/cloudapi/1.0.0/vdcs
        method: GET
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
        return_content: yes
      register: vdcs_response
    - name: Extract VDC ID
      set_fact:
        vcd_organization_vdc_id: "{{ item.id }}"
      loop: "{{ vdcs_response.json['values'] }}"
      when: item.name == vcd_organization_vdc_name
      loop_control:
        label: "{{ item.name }}"
      failed_when: not vcd_organization_vdc_id is defined or vcd_organization_vdc_id == ''
    - name: Get external networks list
      uri:
        url: https://{{ vcd_api_host_name }}/cloudapi/1.0.0/externalNetworks
        method: GET
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
        return_content: yes
      register: external_networks_response
    - name: Extract parent and backing network IDs
      set_fact:
        parent_network_id: "{{ item.id }}"
        backing_network_id: "{{ item.backingNetworkId | default(omit) }}"
      loop: "{{ external_networks_response.json['values'] }}"
      when: item.name == external_network
      loop_control:
        label: "{{ item.name }}"
    - name: Build base network payload 
      set_fact:
        base_payload:
          name: "{{ network_name }}"
          description: "{{ network_description }}"
          parentNetworkId:
            name: "{{ external_network }}"
            id: "{{ parent_network_id }}"
          networkType: "DIRECT"
          ownerRef:
            name: "{{ vcd_organization_vdc_name }}"
            id: "{{ vcd_organization_vdc_id }}"
          orgVdcIsNsxTBacked: true
          orgRef:
            name: "{{ vcd_organization_name }}"
            id: "{{ vcd_organization_id }}"
          shared: "{{ shared_network_bool }}"
    - name: Add backing network if available
      set_fact:
        payload: "{{ base_payload | combine({'backingNetworkId': backing_network_id, 'backingNetworkType': 'DV_PORTGROUP'}) }}"
      when: backing_network_id is defined
    - name: Use base payload if no backing network
      set_fact:
        payload: "{{ base_payload }}"
      when: backing_network_id is not defined
    - name:
      debug:
        var: payload
    - name: Create Direct VDC Network
      uri:
        url: https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgVdcNetworks
        method: POST
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
          Content-Type: application/json
        body: "{{ payload | to_json }}"
        body_format: json
        return_content: yes
        status_code: 202
      register: create_network_response
    - name: Wait for network creation task to complete
      uri:
        url: "{{ create_network_response.location }}"
        method: GET
        headers:
          Accept: application/*+xml;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
        return_content: yes
        status_code: 200
      register: task_status
      until: task_status.content is search("status=\"success\"")
      retries: 10
      delay: 10
      when: create_network_response.status == 202 and create_network_response.location is defined
    - name: Show final task XML
      debug:
        var: task_status.content
      when: create_network_response.status == 202 and create_network_response.location is defined