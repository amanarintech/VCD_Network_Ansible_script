- name: Manage IPv4 Static Pools in Org VDC Network
  hosts: localhost
  gather_facts: false

  vars:
    vcd_api_version: ""
    vcd_api_host_name: ""
    vcd_api_token: ""

    ## user input ##
    vcd_organization_name: ""
    network_name: ""

    # Operation mode: 'add', 'modify', or 'remove'
    operation_mode: "add"

    ipv4_ip_ranges_string: ""  # for addition

    target_range: ""  # add value to remove or modify
    new_range: ""  # add value to modify

  tasks:

    - name: Validate operation mode
      fail:
        msg: "Invalid operation_mode. Must be 'add', 'modify', or 'remove'."
      when: operation_mode not in ['add', 'modify', 'remove']

    - name: Validate inputs based on operation mode
      block:
        - name: Validate add mode inputs
          fail:
            msg: "For 'add' mode, ipv4_ip_ranges_string cannot be empty."
          when:
            - operation_mode == 'add'
            - ipv4_ip_ranges_string | trim == ""

        - name: Validate modify mode inputs
          fail:
            msg: "For 'modify' mode, both target_range and new_range cannot be empty."
          when:
            - operation_mode == 'modify'
            - (target_range | trim == "") or (new_range | trim == "")

        - name: Validate remove mode inputs
          fail:
            msg: "For 'remove' mode, target_range cannot be empty."
          when:
            - operation_mode == 'remove'
            - target_range | trim == ""

    - name: Prepare IP ranges for add operation
      block:
        - name: Split user IPv4 ranges string into list
          set_fact:
            ipv4_ranges_list: "{{ ipv4_ip_ranges_string.split(',') | map('trim') | list }}"

        - name: Build list of dicts for new static pools
          set_fact:
            new_ipv4_static_pools: >-
              {{
                ipv4_ranges_list
                | select('match', '^[0-9.]+-[0-9.]+$')
                | map('regex_replace', '^(.*)-(.*)$', '{"startAddress": "\1", "endAddress": "\2"}')
                | map('from_json')
                | list
              }}
      when: operation_mode == 'add'

    - name: Prepare IP ranges for modify operation
      block:
        - name: Convert target range to dict
          set_fact:
            target_range_dict: "{{ {'startAddress': target_range.split('-')[0], 'endAddress': target_range.split('-')[1]} }}"

        - name: Convert new range to dict
          set_fact:
            new_range_dict: "{{ {'startAddress': new_range.split('-')[0], 'endAddress': new_range.split('-')[1]} }}"
      when: operation_mode == 'modify'

    - name: Prepare IP ranges for remove operation
      block:
        - name: Convert target range to dict
          set_fact:
            target_range_dict: "{{ {'startAddress': target_range.split('-')[0], 'endAddress': target_range.split('-')[1]} }}"
      when: operation_mode == 'remove'

    - name: Get vCloud access token (OAuth)
      uri:
        url: "https://{{ vcd_api_host_name }}/oauth/provider/token"
        method: POST
        headers:
          Accept: "application/json;version={{ vcd_api_version }}"
          Content-Type: application/x-www-form-urlencoded
        body:
          refresh_token: "{{ vcd_api_token }}"
          grant_type: refresh_token
        body_format: form-urlencoded
        return_content: yes
        validate_certs: false
      register: vcloud_token_response

    - name: Set access token
      set_fact:
        vcloud_access_token: "{{ vcloud_token_response.json.access_token }}"

    - name: Get list of organizations
      uri:
        url: "https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgs"
        method: GET
        headers:
          Accept: "application/json;version={{ vcd_api_version }}"
          Authorization: "Bearer {{ vcloud_access_token }}"
        return_content: yes
        validate_certs: false
      register: org_list_response

    - name: Find organization by name
      set_fact:
        org_matches: "{{ org_list_response.json['values'] | selectattr('name', 'equalto', vcd_organization_name) | list }}"

    - name: Fail if organization not found
      fail:
        msg: "Organization '{{ vcd_organization_name }}' not found"
      when: org_matches | length == 0

    - name: Set organization ID
      set_fact:
        vcd_organization_id: "{{ org_matches[0].id }}"

    - name: Get list of Org VDC networks
      uri:
        url: "https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgVdcNetworks"
        method: GET
        headers:
          Accept: "application/json;version={{ vcd_api_version }}"
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
          Authorization: "Bearer {{ vcloud_access_token }}"
        return_content: yes
        validate_certs: false
      register: network_list_response

    - name: Find network by name
      set_fact:
        network_matches: "{{ network_list_response.json['values'] | selectattr('name', 'equalto', network_name) | list }}"

    - name: Fail if network not found
      fail:
        msg: "Network '{{ network_name }}' not found."
      when: network_matches | length == 0

    - name: Set network ID
      set_fact:
        network_id: "{{ network_matches[0].id }}"

    - name: Get existing Org VDC Network details
      uri:
        url: "https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgVdcNetworks/{{ network_id }}"
        method: GET
        headers:
          Accept: "application/json;version={{ vcd_api_version }}"
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
          Authorization: "Bearer {{ vcloud_access_token }}"
        return_content: yes
        validate_certs: false
      register: current_network

    - name: Find IPv4 subnets list
      set_fact:
        ipv4_subnets_list: >-
          {{
            current_network.json['subnets']['values']
            | selectattr('gateway', 'search', '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
            | list
          }}

    - name: Fail if no IPv4 subnet found
      fail:
        msg: "No IPv4 subnet found in the Org VDC Network."
      when: ipv4_subnets_list | length == 0

    - name: Extract first IPv4 subnet
      set_fact:
        ipv4_subnet: "{{ ipv4_subnets_list[0] }}"

    - name: Extract IPv6 subnets (all IPv6 subnets)
      set_fact:
        ipv6_subnets: >-
          {{
            current_network.json.subnets['values']
            | rejectattr('gateway', 'search', '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
            | list
          }}

    - name: Extract existing IPv4 static pools list
      set_fact:
        existing_ipv4_ranges: "{{ (ipv4_subnet.ipRanges['values'] | default([])) if (ipv4_subnet is defined and ipv4_subnet.ipRanges is defined and ipv4_subnet.ipRanges['values'] is defined) else [] }}"

    - name: Ensure existing_ipv4_ranges is always a list
      set_fact:
        existing_ipv4_ranges: "{{ existing_ipv4_ranges if existing_ipv4_ranges is iterable and (existing_ipv4_ranges is not string and existing_ipv4_ranges is not mapping) else [] }}"

    - name: Process add operation
      block:
        - name: Ensure new_ipv4_static_pools is always a list
          set_fact:
            new_ipv4_static_pools: "{{ new_ipv4_static_pools if new_ipv4_static_pools is iterable and (new_ipv4_static_pools is not string and new_ipv4_static_pools is not mapping) else [] }}"

        - name: Filter only new IPv4 ranges (no duplicates)
          set_fact:
            ipv4_static_pools_to_add: >-
              {{
                new_ipv4_static_pools
                | default([])
                | reject('in', existing_ipv4_ranges)
                | list
              }}

        - name: Build updated IPv4 ipRanges list
          set_fact:
            updated_ipv4_ipRanges: "{{ (existing_ipv4_ranges | default([])) + (ipv4_static_pools_to_add | default([])) }}"
      when: operation_mode == 'add'

    - name: Process modify operation
      block:
        - name: Verify target range exists
          fail:
            msg: "Target range {{ target_range }} not found in existing ranges"
          when: target_range_dict not in existing_ipv4_ranges

        - name: Remove target range and add new range
          set_fact:
            updated_ipv4_ipRanges: >-
              {{
                (existing_ipv4_ranges | rejectattr('startAddress', 'equalto', target_range_dict.startAddress)) + [new_range_dict]
              }}
      when: operation_mode == 'modify'

    - name: Process remove operation
      block:
        - name: Verify target range exists
          fail:
            msg: "Target range {{ target_range }} not found in existing ranges"
          when: target_range_dict not in existing_ipv4_ranges

        - name: Remove target range from IP ranges
          set_fact:
            updated_ipv4_ipRanges: >-
              {{
                existing_ipv4_ranges | rejectattr('startAddress', 'equalto', target_range_dict.startAddress)
              }}
      when: operation_mode == 'remove'

    - name: Build updated IPv4 subnet with new/modified ipRanges
      set_fact:
        updated_ipv4_subnet: >-
          {{
            (ipv4_subnet | default({}))
            | combine({
              'ipRanges': {'values': updated_ipv4_ipRanges},
              'totalIpCount': updated_ipv4_ipRanges | length,
              'usedIpCount': 0
            }, recursive=True)
          }}
      when: operation_mode in ['add', 'modify', 'remove']

    - name: Build final updated subnets list (IPv4 updated + all existing IPv6)
      set_fact:
        updated_subnets_list: "{{ [updated_ipv4_subnet] + (ipv6_subnets | default([])) }}"
      when: operation_mode in ['add', 'modify', 'remove']

    - name: Build updated network payload
      set_fact:
        updated_payload: "{{ current_network.json | combine({'subnets': {'values': updated_subnets_list}}, recursive=True) }}"
      when: operation_mode in ['add', 'modify', 'remove']

    - name: Debug payload
      debug:
        var: updated_payload
      when: operation_mode in ['add', 'modify', 'remove']

    - name: Update Org VDC Network
      uri:
        url: "https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgVdcNetworks/{{ network_id }}"
        method: PUT
        headers:
          Accept: "application/json;version={{ vcd_api_version }}"
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
          Content-Type: "application/json"
          Authorization: "Bearer {{ vcloud_access_token }}"
        body: "{{ updated_payload }}"
        body_format: json
        status_code: [200, 202]
        validate_certs: false
      when: operation_mode in ['add', 'modify', 'remove']

    - name: Display success message for add operation
      debug:
        msg: "Successfully added IP ranges: {{ ipv4_ip_ranges_string }}"
      when: operation_mode == 'add'

    - name: Display success message for modify operation
      debug:
        msg: "Successfully modified IP range from {{ target_range }} to {{ new_range }}"
      when: operation_mode == 'modify'

    - name: Display success message for remove operation
      debug:
        msg: "Successfully removed IP range: {{ target_range }}"
      when: operation_mode == 'remove'