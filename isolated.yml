- name: Create Isolated VDC Network on VMware Cloud Director
  hosts: localhost
  gather_facts: false

  vars:
    vcd_organization_vdc_name: ""
    vcd_organization_vdc_id: ""
    vcd_organization_name: ""
    vcd_organization_id: ""
    vcd_api_version: ""
    vcd_api_host_name: ""
    vcd_api_token: ""

    
    backing_network_id: ""

    network_name: ""
    network_description: ""
    enable_dual_subnet_network: false
    guest_vlan_allowed: true

    # IPv4 settings
    Gateway_CIDR_IPv4: "172.20.30.1"
    ipv4_prefix_length: 24
    ipv4_ip_ranges_string: "172.20.30.10-172.20.30.20,172.20.30.30-172.20.30.40"

    Gateway_CIDR_IPv6: "fd00:172:20:30::1"
    ipv6_prefix_length: 64
    ipv6_ip_ranges_string: "fd00:172:20:30::10-fd00:172:20:30::20,fd00:172:20:30::30-fd00:172:20:30::40"

    ipv4_dns_suffix: "example.com"
    ipv4_dns_server1: "8.8.8.8"
    ipv4_dns_server2: "1.1.1.1"

  tasks:
    - name: Get vCloud access token (OAuth)
      uri:
        url: https://{{ vcd_api_host_name }}/oauth/provider/token
        method: POST
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Content-Type: application/x-www-form-urlencoded
        body:
          refresh_token: '{{ vcd_api_token }}'
          grant_type: refresh_token
        body_format: form-urlencoded
        return_content: yes
      register: vcloud_token_response

    - name: Set access token
      set_fact:
        vcloud_access_token: '{{ vcloud_token_response.json.access_token }}'

    - name: Parse IPv4 IP ranges from string
      set_fact:
        ipv4_ip_ranges: "{{ [] if ipv4_ip_ranges_string | trim == '' else ipv4_ip_ranges_string.split(',') | map('regex_replace', '^(.*)-(.*)$', '{\"startAddress\": \"\\1\", \"endAddress\": \"\\2\"}') | map('from_json') | list }}"

    - name: Parse IPv6 IP ranges from string
      set_fact:
        ipv6_ip_ranges: "{{ [] if ipv6_ip_ranges_string | trim == '' else ipv6_ip_ranges_string.split(',') | map('regex_replace', '^(.*)-(.*)$', '{\"startAddress\": \"\\1\", \"endAddress\": \"\\2\"}') | map('from_json') | list }}"

    - name: Build IPv4 subnet
      set_fact:
        ipv4_subnet: >-
          {{
            {
              "gateway": Gateway_CIDR_IPv4,
              "prefixLength": ipv4_prefix_length,
              "dnsSuffix": ipv4_dns_suffix,
              "dnsServer1": ipv4_dns_server1,
              "dnsServer2": ipv4_dns_server2,
              "enabled": true
            }
            | combine({"ipRanges": {"values": ipv4_ip_ranges}} 
                if ipv4_ip_ranges 
                and ipv4_ip_ranges[0].startAddress|length > 0 
                and ipv4_ip_ranges[0].endAddress|length > 0 
                else {})
          }}

    - name: Set initial subnet_values with IPv4
      set_fact:
        subnet_values:
          - "{{ ipv4_subnet }}"

    - name: Build IPv6 subnet (conditionally include ipRanges)
      set_fact:
        ipv6_subnet: >-
          {{
            {
              "gateway": Gateway_CIDR_IPv6,
              "prefixLength": ipv6_prefix_length,
              "enabled": true
            }
            | combine({"ipRanges": {"values": ipv6_ip_ranges}} 
                if ipv6_ip_ranges 
                and ipv6_ip_ranges[0].startAddress|length > 0 
                and ipv6_ip_ranges[0].endAddress|length > 0 
                else {})
          }}

    - name: Add IPv6 subnet if dual stack enabled
      set_fact:
        subnet_values: "{{ subnet_values + [ipv6_subnet] }}"
      when: enable_dual_subnet_network

    - name: Build isolated network payload
      set_fact:
        payload:
          name: "{{ network_name }}"
          description: "{{ network_description }}"
          subnets:
            values: "{{ subnet_values }}"
          backingNetworkId: "{{ backing_network_id }}"
          backingNetworkType: NSXT_FLEXIBLE_SEGMENT
          networkType: ISOLATED  
          ownerRef:
            name: "{{ vcd_organization_vdc_name }}"
            id: "{{ vcd_organization_vdc_id }}"
          orgVdcIsNsxTBacked: true
          orgRef:
            name: "{{ vcd_organization_name }}"
            id: "{{ vcd_organization_id }}"
          shared: false
          enableDualSubnetNetwork: "{{ enable_dual_subnet_network }}"
          guestVlanTaggingAllowed: "{{ guest_vlan_allowed }}"

    - name: Payload
      debug:
        var: payload

    - name: Create Isolated VDC Network
      uri:
        url: https://{{ vcd_api_host_name }}/cloudapi/1.0.0/orgVdcNetworks
        method: POST
        headers:
          Accept: application/json;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
          Content-Type: application/json
        body: "{{ payload | to_json }}"
        body_format: json
        return_content: yes
        status_code: 202
      register: create_network_response

    - name: Debug task location (for 202)
      debug:
        var: create_network_response

    - name: Wait for network creation task to complete
      uri:
        url: "{{ create_network_response.location }}"
        method: GET
        headers:
          Accept: application/*+xml;version={{ vcd_api_version }}
          Authorization: Bearer {{ vcloud_access_token }}
          X-VMWARE-VCLOUD-TENANT-CONTEXT: "{{ vcd_organization_id }}"
        return_content: yes
        status_code: 200
      register: task_status
      until: task_status.content is search("status=\"success\"")
      retries: 10
      delay: 10
      when: create_network_response.status == 202 and create_network_response.location is defined

    - name: Show final task XML
      debug:
        var: task_status.content
      when: create_network_response.status == 202 and create_network_response.location is defined